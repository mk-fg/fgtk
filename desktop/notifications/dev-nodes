#!/bin/bash
set -e
err=0

conf_file="$HOME"/.dev-nodes.monitor.list
[[ -n "$DBUS_SESSION_BUS_ADDRESS" ]] || \
	export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u)"/bus

usage() {
	local bin=${0##*/}
	[[ $1 -eq 0 ]] || exec 1>&2
	echo "Usage: $bin [config-file]"
	echo
	echo "Reads config-file with a list of device checks to run,"
	echo "  sends desktop notifications for any detected issues/mismatches."
	echo "Default configuration file path: $conf_file"
	echo "D-Bus socket for notifications: $DBUS_SESSION_BUS_ADDRESS"
	exit ${1:-1}; }
[[ "$1" != -h && "$1" != --help && "$1" -le 1 ]] || usage 0
conf_file=${1:-$conf_file}

check_dev() {
	dev=$1 act=$2; shift 2
	case "$act" in
		plug|missing)
			[[ ! "$dev" =~ ^[A-Z]+= ]] || dev=$(findfs "$dev" 2>/dev/null ||:)
			[[ ! -e "$dev" ]] || return 0 ;;
		unplug|remove)
			[[ ! "$dev" =~ ^[A-Z]+= ]] || dev=$(findfs "$dev" 2>/dev/null ||:)
			[[ -e "$dev" ]] || return 0 ;;

		net-cut) ip -br link show "$dev" >/dev/null 2>&1 || return 0 ;;
		net-connect) ip -br link show "$dev" >/dev/null 2>&1 && return 0 ||: ;;

		fido2-pins-[0-9]*)
			[[ -e "$dev" ]] || return 0
			re=$'(^|\n)[\r ]*pin retries: ([0-9]+)[\r ]*(\n|$)'
			st=$(fido2-token -I "$dev" || echo 'pin retries: 0')
			[[ "$st" =~ $re ]] && att_left=${BASH_REMATCH[2]} || att_left=0
			[[ "$att_left" -lt "${act#fido2-pins-}" ]] || return 0 ;;

		yk-piv-pins-[0-9]*=[0-9]*)
			[[ -e "$dev" ]] || return 0
			[[ "$act" =~ ^yk-piv-pins-([0-9]+)=([0-9]+)$ ]] && {
					serial=${BASH_REMATCH[1]} att_chk=${BASH_REMATCH[2]}; } \
				|| { serial=000 att_chk=999; }
			re=$'(^|\n)[\r ]*PIN tries remaining: +([0-9]+)/'
			st=$(ykman -d "$serial" piv info || echo 'PIN tries remaining: 0/0')
			[[ "$st" =~ $re ]] && att_left=${BASH_REMATCH[2]} || att_left=0
			[[ "$att_left" -lt "$att_chk" ]] || return 0 ;;

		run|stop)
			[[ "$dev" =~ ^/pgrep/(.+)$ ]] || {
				echo >&2 "ERROR: Invalid pgrep spec '$dev $act ...'"; err=1; return; }
			dev=${BASH_REMATCH[1]} a= ax= args=()
			for a in ${dev//\// }; do [[ -z "$ax" ]] || {
				[[ "${#ax}" -gt 1 ]] && args+=( --"$ax" ) || args+=( -"$ax" ); }
				ax=$a; done; args+=( "$ax" )
			pgrep "${args[@]}" >/dev/null && running=1 || running=
			[[ "$act" != run ]] || { [[ -z "$running" ]] || return 0; }
			[[ "$act" != stop ]] || { [[ -n "$running" ]] || return 0; } ;;

		*) echo >&2 "ERROR: Unrecognized action '$dev $act ...'"; err=1; return
	esac

	read b2 junk < <(b2sum -l32 <<< "$dev"); u=cron-notify-"$b2"
	systemctl -q --user is-active "$u" && return ||:
	systemd-run --user --no-block -qG -u "$u" -- \
		notify-send -w -u critical -t 0 -i circuit \
			"[dev-check] <span color=\"red\" text_transform=\"uppercase\">$act</span>: $@" \
			"Detected dev issue <big>[$act]</big>: <b><big>$@</big></b>"`
			`"\nMachine: $HOSTNAME // Date-time: $(printf '%(%F %R)T' -1)"; }

while read dev act name; do
	case "$dev" in ''|\#*) continue; esac
	check_dev "$dev" "$act" "$name"
done < "$HOME"/.dev-nodes.monitor.list
exit $err
