#!/bin/bash

# For use in shebang of ./vm.* wrapper-scripts, e.g.: #!./vm.linux -i 123 -m 4G -d vm.img
[[ "$1" = *\ * && "$2" = ./vm.* ]] && {
	cmd=( "$0" $1 ); shift; shift; cmd+=( "$@" ); exec "${cmd[@]}"; }

script_info='Generic linux distro VM with grub and partitioned disk img.'
ins=1 smp=4 mem=4G nets=1 root_opts_file=()
img=() dev_ro=() dev=() vfs= efi= iso=

read -r -d '' script_usage <<EOF
Usage: $0 [-r|--root] [ {-i|--instance} $ins ]
	[ {-t|--smp} $smp ] [ {-m|--mem} $mem ] [ {-o|--opts} file.opts ]
	[ {-q|--img} file.qcow2 +] [ {-s|--dev-ro} disk.img +] [ {-d|--dev} /dev/xyz +]
	[ {-v|--vfs} dir ] [ {-e|--efi} [copy of /usr/share/ovmf/x64/OVMF_VARS.fd].bin ]
	[ --iso image.iso ] [-c|--console] [-g|--gtk] [-nX|--nets=X]
	[ { d | dump } [path] | { r | restore } [-i] [path] | { m | monitor } | { n | net-only } ]
(note: ordering of options matters)
EOF
script_usage=${script_usage//	/  }

read -r -d '' script_info_ext <<EOF
$script_info

Cheatsheet for qemu-img (to use with -q/--img option):
	qemu-img create -f qcow2 install.qcow2 10G
	qemu-img create -b install.qcow2 -f qcow2 install.qcow2.inc
	qemu-img commit install.qcow2.inc && rm install.qcow2.inc

Cheatsheet to init new cloudimg:
	qemu-nbd -c /dev/nbd0 install.qcow2.inc && fsck -a /dev/nbd0p1 && mount /dev/nbd0p1 /mnt/nbd
	 && chmod a+r /mnt/nbd/{vmlinuz,initrd.img}
	 && cat ~/.ssh/authorized_keys > /mnt/nbd/root/.ssh/authorized_keys
	 && cat ~/.ssh/authorized_keys > /mnt/nbd/home/ubuntu/.ssh/authorized_keys
	 && touch /mnt/nbd/etc/cloud/cloud-init.disabled
	 && rm -rf /mnt/nbd/etc/systemd/system/cloud-init.target.wants
	 && umount /mnt/nbd && qemu-nbd -d /dev/nbd0

Cheatsheet for Virtio-FS (to use -v/--vfs option and "vfs" dir):

	-- Initial install to qemu-img
		qemu-img create -f qcow2 install.qcow2 10G
		./ubuntu --img install.qcow2 --iso ubuntu/ubuntu-18.04-desktop-amd64.iso

	-- ubuntu 19.X - add virtiofs.ko to initramfs (likely not needed later)
		# needs kernel-5.4+ - https://kernel.ubuntu.com/~kernel-ppa/mainline/
		echo virtiofs >> /etc/initramfs-tools/modules
		update-initramfs -k all -c

	-- rsync from nbd to shared fs/mount
		modprobe nbd
		qemu-nbd -c /dev/nbd0 install.qcow2
		fsck -a /dev/nbd0p1
		mount /dev/nbd0p1 /mnt/nbd

		rsync -HaAxXS /mnt/nbd/. vfs/
		: > vfs/etc/fstab && rm vfs/swapfile

		umount /mnt/nbd
		qemu-nbd -d /dev/nbd0

	-- $(awk '!/^#/ {p=0} /^### virtiofsd/ {
		p=1; sub(/^#+ ?/,"")} p {sub(/^#+ ?/,"  "); print}' $0)

	-- run from virtio-fs: $0 --vfs vfs
EOF
script_info_ext=${script_info_ext//	/  }

video=( -vga std )
# video=( -display vnc 0 )

[[ "$1" = -r || "$1" = --root || "$UID" -ne 0 ]] || {
	echo >&2 "ERROR: running as uid=0 but no -r/--root specified"; exit 1; }

[[ "$1" = -i || "$1" = --instance ]] && { ins=$2; shift; shift; }
[[ "$1" = -t || "$1" = --smp ]] && { smp=$2; shift; shift; }
[[ "$1" = -m || "$1" = --mem ]] && { mem=$2; shift; shift; }
[[ "$1" = -o || "$1" = --opts ]] && { declare -a root_opts_file="($(<"$2"))"; shift; shift; }
while [[ "$1" = -q || "$1" = --img ]]; do img+=( "$(realpath "$2")" ); shift; shift; done
while [[ "$1" = -s || "$1" = --dev-ro ]]; do dev_ro+=( "$(realpath "$2")" ); shift; shift; done
while [[ "$1" = -d || "$1" = --dev ]]; do dev+=( "$(realpath "$2")" ); shift; shift; done
[[ "$1" = -v || "$1" = --vfs ]] && { vfs=$(realpath "$2"); shift; shift; }
[[ "$1" = -e || "$1" = --efi ]] && { efi=$(realpath "$2"); shift; shift; }
[[ "$1" = --iso ]] && { iso=$(realpath "$2"); shift; shift; }
[[ "$1" = -c || "$1" = --console ]] && { video=( -nographic ); shift; }
[[ "$1" = -g || "$1" = --gtk ]] && {
	video=( -vga virtio -display gtk,gl=on ); shift; }
[[ "$1" = -n2 || "$1" = --nets=2 ]] && { nets=2; shift; }
[[ "$1" = -n3 || "$1" = --nets=3 ]] && { nets=3; shift; }

root=$(dirname "$BASH_SOURCE")
dst="$root"/live.dump
telnet_port=$(( 8200 + $ins ))
vde_mac_tail=54:00:12:34:$(( 60 + $ins )) # missing first (even) octet
vde_path="$HOME"/tmp/vde
dump_inc= restore= net_only=


### Management and one-off commands

case "$1" in
	d|dump)
		[[ "$2" = -i ]] && { dump_inc=-i; shift; }
		[[ -n "$2" ]] && {
			touch "$2" || exit 1
			dst=$(realpath "$2")
		}
		echo "Dumping to: $dst"
		ncat -t 127.0.0.1 "$telnet_port" <<EOF
stop
migrate_set_speed 4g
migrate -d $dump_inc "exec:lzop -c > $dst"
EOF
		echo
		while :; do
			echo 'info migrate' | ncat -t 127.0.0.1 "$telnet_port" |
				grep -aq '^Migration status:[[:space:]]*completed[[:space:]]*$'
			pipe=( "${PIPESTATUS[@]}" )
			[[ ${pipe[0]} -ne 0 || ${pipe[1]} -ne 0 ]] && exit 1
			[[ ${pipe[2]} -eq 0 ]] && {
				echo 'quit' | ncat -t 127.0.0.1 "$telnet_port"
				echo "Done"
				ls -lah "$dst"
				exit 0
			}
			sleep 1 || exit 1
		done ;;

	r|restore)
		[[ -n "$2" ]] && dst=$2
		echo "Restoring from: $dst"
		[[ -f "$dst" ]] || { echo >&2 "FIle not found: $dst"; exit 1; }
		restore=t ;;

	m|monitor) exec rlwrap ncat -t 127.0.0.1 "$telnet_port" ;;
	n|net|net-only) net_only=t ;;

	'') ;;
	-h|--help-ext) echo "$script_usage";echo; echo "$script_info_ext"; exit 0 ;;
	*)
		echo >&2 "$script_usage"
		echo >&2
		echo >&2 "$script_info"
		echo >&2 "Use -h/--help-ext option for various qemu/option/setup cheatsheets."
		exit 1 ;;
esac

cd "$root"


### Too slow otherwise

err=0
modprobe kvm || exit 1
modprobe kvm-intel 2>/dev/null || (( err += 1 ))
modprobe kvm-amd 2>/dev/null || (( err += 1 ))
[[ "$err" -lt 2 ]] || { echo >&2 "ERROR: failed to probe intel/amd kvm modules"; exit 1; }


### VDE
# Tend to break terminal for some reason, hence &>/dev/null on start

pid1=$$ pid2=$$
mkdir -p "$vde_path"

cgrc -rcu vde && {
	rm -rf "$vde_path"/link.sock
	cgrc -ru vde vm -- vde_switch \
		-s "$vde_path"/link.sock -M "$vde_path"/mgmt.sock &>/dev/null &
	pid1=$!; }

for n in {0..50}; do
	[[ -e "$vde_path"/link.sock ]] && break
	sleep 0.1
done
[[ $n -lt 50 ]] || { echo >&2 "ERROR: vde switch startup failed"; exit 1; }

cgrc -rcu vde-tap && {
	cgrc -ru vde-tap vm -- \
		sudo -n vde_plug2tap -s "$vde_path"/link.sock vde &>/dev/null &
	pid2=$!; }

# Add a little delay if vde stuff is just starting
kill -0 "$pid1" "$pid2" || { echo >&2 "ERROR: vde failed to start"; exit 1; }
for n in {0..5}; do
	err=t; ip link show vde &>/dev/null && { err=; break; }
	sleep 0.1
done
[[ -z "$err" ]] || { echo >&2 "ERROR: vde failed to start (no iface)"; exit 1; }

[[ -n "$net_only" ]] && exit 0


### virtiofsd daemon - has to run as root:
# # uid=root is to allow access to local uid=root files
# # Note: SETLKW (fcntl wait for lock) is still not supported.
# #   Workaround: bind-mount files that require it from /run, see this script for example .service.
#
# /usr/lib/qemu/virtiofsd -f \
#  -o source=$(realpath fs) --socket-path=vfs.sock \
#  -o cache=always,writeback,xattr,flock,posix_lock &
# chmod 666 vfs.sock

## setup-setlkw-hacks.service workaround for SETLKW in dpkg and such
# [Unit]
# DefaultDependencies=no
# After=local-fs.target run.mount
#
# # Anything requiring SETLKW on these files should be listed here
# Before=systemd-sysusers.service
#
# [Service]
# Type=oneshot
# RemainAfterExit=yes
#
# ExecStart=bash -c '\
# 	mkdir -m700 /run/setlkw ; cd /run/setlkw ;\
# 	touch dpkg-triggers ; mount -o bind dpkg-triggers /var/lib/dpkg/triggers/Lock ;\
# 	touch passwd /etc/.pwd.lock ; mount -o bind passwd /etc/.pwd.lock ;\
# '
# ExecStop=bash -c '\
# 	umount -l /var/lib/dpkg/triggers/Lock /etc/.pwd.lock ;\
# '
#
# [Install]
# WantedBy=multi-user.target


### img/iso options

## For scsi/nvme opts, see: -device help, -device virtio-blk,help
# -device virtio-scsi,id=scsi0,num_queues=4
# -device scsi-hd,drive=drive0,bus=scsi0.0,channel=0,scsi-id=0,lun=0
# -drive file="$img1",if=none,id=drive0
# -device scsi-hd,drive=drive1,bus=scsi0.0,channel=0,scsi-id=0,lun=1
# -drive file="$img2",if=none,id=drive1

n=0 root_opts=()

add_disk() {
	[[ "$2" = /dev/* ]] && cache=none || cache=writethrough
	root_opts+=(
		-drive file="$1",id=vio-disk.$n,if=none,cache="$cache",aio=io_uring,"$2"
		-device virtio-blk,drive=vio-disk.$n,logical_block_size=512,physical_block_size=4096 )
	((n+=1)); }

[[ "${#root_opts_file[@]}" -eq 0 ]] || root_opts+=( "${root_opts_file[@]}" )

[[ "${#img[@]}" -eq 0 ]] || for p in "${img[@]}"; do add_disk "$p" format=qcow2; done
[[ "${#dev_ro[@]}" -eq 0 ]] || for p in "${dev_ro[@]}"; do add_disk "$p" format=raw,readonly=on; done
[[ "${#dev[@]}" -eq 0 ]] || for p in "${dev[@]}"; do add_disk "$p" format=raw; done

[[ -z "$iso" ]] || root_opts+=( -cdrom "$iso" )
[[ -z "$efi" ]] || root_opts+=(
	-drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd
	-drive if=pflash,format=raw,file="$efi" )

[[ -z "$vfs" ]] || {
	root_opts+=(
		-chardev socket,id=vfs-root,path="$vfs".sock
		-device vhost-user-fs-pci,queue-size=1024,chardev=vfs-root,tag=vio-root,cache-size=2G
		-object memory-backend-file,id=vfs-mem,size=4G,mem-path=/dev/shm,share=on
		-numa node,memdev=vfs-mem )
	root_opts_str="${root_opts[*]}"
	# -o/--opts file can be used as alternative to these hardcoded opts
	# Fix access to these: chmod a+r fs/boot/*
	[[ $root_opts_str =~ (^|\ )-kernel\  ]] \
		|| root_opts+=( -kernel "$vfs"/boot/vmlinuz )
	[[ $root_opts_str =~ (^|\ )-append\  ]] \
		|| root_opts+=( -initrd "$vfs"/boot/initrd.img )
	[[ $root_opts_str =~ (^|\ )-initrd\  ]] \
		|| root_opts+=( -append 'root=vio-root rootfstype=virtiofs rw quiet splash' )
}


### net options

mac_head=52 net_opts=()
while [[ "$nets" -gt 0 ]]; do
	net_opts+=(
		-device virtio-net-pci,mac=${mac_head}:${vde_mac_tail},netdev=vde_${mac_head}
		-netdev vde,sock="$vde_path"/link.sock,id=vde_${mac_head} )
	(( nets -= 1 )); (( mac_head += 2 ))
done


### Run qemu

qemu_opts=(
	-name "$(basename "$0").$ins"

	-rtc base=utc,clock=host
	-monitor telnet:127.0.0.1:${telnet_port},server,nowait
	-usb -device usb-kbd -device usb-mouse
	-k en-us

	-enable-kvm
	-cpu host
	-smp "$smp"
	-m "$mem"
	-device virtio-balloon,deflate-on-oom=on

	"${video[@]}"
	"${net_opts[@]}"
	"${root_opts[@]}"

	# -device usb-ehci,id=usb,bus=pci.0,addr=0x4
	# -device usb-host,hostbus=1,hostaddr=3
)

ulimit -c 0 -s 1048576 -m 18874368 -v 25165824 # STACK=1G RSZ=18G VSZ=24G
export QEMU_AUDIO_DRV=none NO_AT_BRIDGE=1

[[ -n "$restore" ]] && qemu_opts+=( -incoming "exec:bsdcat $dst" )

exec cgrc -ru "qemu-linux@$ins" vm -- qemu-system-x86_64 "${qemu_opts[@]}"
