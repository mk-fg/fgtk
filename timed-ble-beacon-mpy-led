#!/usr/bin/env python

import hashlib as hl, collections as cs
import asyncio, machine, bluetooth, time, struct, random


class Conf:
	verbose = False
	ble_mid = 61_634 # uint16 manufacturer id to match in broadcasts
	ble_secret = b'timed-beacon-test'

	scan_duration_ms = 5_000
	scan_interval_us = 60_000
	scan_window_us = 30_000

	# "clear" is the normal state, "beacon" is a state when those are detected
	clear_sample_interval = 20.0
	clear_sample_time = 4.0
	beacon_sample_interval = 5.0 * 60 # won't get lower than this in a "beacon" state
	beacon_sample_time = 3.0
	beacon_repeat_grace = 6.0 * 60 # ok to repeat counter within this td
	beacon_span_checks = 6 # do N checks within timespan sent in the beacon

	_tdt = cs.namedtuple('LEDtdt', 'chance time_min time_max')
	led_pin = 'LED'
	led_time_on = [_tdt(1, 0.020, 1.0)]
	led_time_off = [ _tdt(0.6, 0.1, 0.5), _tdt(0.6, 0.3, 1),
		_tdt(0.4, 0.8, 10), _tdt(0.3, 5, 90), _tdt(1, 60, 3*60) ]


class BLE_MSE_Scanner:

	def __init__(self, duration_ms, interval_us, window_us):
		self.ble, self.scan_args = bluetooth.BLE(), (duration_ms, interval_us, window_us)
		self.ble.irq(self._irq_handler)
		self.scan, self.queue, self.check = False, list(), asyncio.ThreadSafeFlag()

	def __enter__(self):
		if self.scan: raise RuntimeError('Concurrent scans not allowed')
		self.scan = True; self.queue.clear(); self.check.clear()
		self.ble.active(True); self.ble.gap_scan(*self.scan_args)

	def __exit__(self, *err):
		self.scan = False; self.check.set(); self.ble.active(False)

	async def get_data(self):
		while True:
			data = None
			await self.check.wait()
			try:
				while self.queue: # get first adv_type_manufacturer data
					if data := self._decode_field(self.queue.pop(), 0xff): break
			finally:
				if self.queue: self.check.set()
			if not data and self.scan: continue
			return data

	def _irq_handler(self, ev, data):
		if not self.scan: return
		if ev == 5: # scan_result
			addr_type, addr, adv_type, rssi, adv_data = data
			if adv_type != 3: return # only need adv_scan_ind
			self.queue.append(bytes(adv_data)); self.check.set()
		elif ev == 6: self.scan = False; self.check.set() # scan_done

	def _decode_field(self, pkt, ft, n=0):
		if not pkt: return
		while n + 1 < len(pkt):
			if pkt[n + 1] == ft: return pkt[n + 2 : n + pkt[n] + 1]
			n += 1 + pkt[n]


class LEDBlinker:

	def __init__(self, conf):
		self.tdts_on, self.tdts_off = conf.led_time_on, conf.led_time_off
		self.led = machine.Pin(conf.led_pin, machine.Pin.OUT)
		self.enabled = asyncio.Event()
		self.log = conf.verbose and (lambda *a: print('[led]', *a))

	def blink_enable(self, state=True):
		if state != self.enabled.is_set():
			self.log and self.log('Blinking ' + ('enabled' if state else 'disabled'))
		if state: self.enabled.set()
		else: self.enabled.clear()

	async def led_enable(self, delay, state=True):
		for tdt in delay:
			if random.random() > tdt.chance: continue
			self.led.value(state)
			td = tdt.time_min + random.random() * (tdt.time_max - tdt.time_min)
			# self.log and self.log(f' blink state={int(state)} hold={td:.3f}')
			return await asyncio.sleep(td)

	async def run(self):
		while True:
			await self.enabled.wait()
			await self.led_enable(self.tdts_on)
			await self.led_enable(self.tdts_off, False)


def hmac_sha256(key, msg):
	if len(key) > 64: key = hl.sha256(key).digest()
	key += bytes(64 - len(key))
	inner, outer = (hl.sha256(bytes(c^p for c in key)) for p in [0x36, 0x5c])
	inner.update(msg); outer.update(inner.digest()); return outer.digest()

async def run_ble(conf, leds):
	st_beacon, st_clear = (states := ('beacon', 'clear'))
	timings = dict(zip(states, (
		(round(s1*1000), round(s2*1000)) for s1, s2 in (
			(conf.beacon_sample_interval, conf.beacon_sample_time),
			(conf.clear_sample_interval, conf.clear_sample_time) ) )))
	beacon_grace_td = round(conf.beacon_repeat_grace * 1000)
	p_log = conf.verbose and (lambda *a: print('[main]', *a))
	ble_scan = BLE_MSE_Scanner(
		conf.scan_duration_ms, conf.scan_interval_us, conf.scan_window_us )

	p_log and p_log('Starting main loop...')
	counter, st = 0, st_clear; td_sleep, td_sample = timings[st]
	td_st, td_st_split, td_st_left = 0, conf.beacon_span_checks, list()
	beacon, beacon_ts = False, 0
	while True:
		leds.blink_enable(st != st_beacon)
		beacon_expected = st == st_beacon

		if beacon != beacon_expected:
			st_new = st_beacon if beacon else st_clear
			p_log and p_log(f'State change (beacon={int(beacon)}): {st} -> {st_new}')
			st = st_new; td_sleep, td_sample = timings[st]

		else:
			td = td_sleep
			if beacon_expected and beacon: # use td_st + with N rare checks in-between
				if abs(sum(td_st_left) - td_st) > td*2: td_st_left.clear() # changed/drifted
				if not td_st_left: # split td_st into chunks, check on those
					if (td_st_chunk := td_st / td_st_split) > td:
						td_st_left = [td_st_chunk + td / td_st_split] * td_st_split
				if td_st_left: td = round(td_st_left.pop())
			elif td_st_left: td_st_left.clear() # beacon went away
			p_log and p_log(f'Delay (state={st}): {td:,d}ms')
			await asyncio.sleep_ms(td)

		p_log and p_log(f'Scanning for broadcasts ({td_sample:,d}ms)...')
		beacon = False

		with ble_scan: # scan until first hmac-match
			while data := await ble_scan.get_data():
				if len(data) != 28 or int.from_bytes(data[:2], 'little') != conf.ble_mid: continue
				data, hmac = data[2:8], data[8:]
				td_st, n = struct.unpack('<HL', data); td_st *= 100_000
				p_log and p_log(f'Scan data #{n:,d} {td_st:,d}ms [ {data} ]')
				if (hmac_chk := hmac_sha256(conf.ble_secret, data)[:20]) == hmac: break
				p_log and p_log(f'Bad HMAC: #{n} expected={hmac_chk} actual={hmac}')
		p_log and p_log('Scan done' + (', no relevant data found' if not data else ''))
		if not data: continue

		grace = (beacon_grace_td - time.ticks_diff(ts := time.ticks_ms(), beacon_ts)) > 0
		if (grace and n < counter) or (not grace and n <= counter):
			p_log and p_log(f'Replayed/reset counter: #{n:,d} <= old #{counter:,d}')
			continue
		counter, beacon, beacon_ts = n, True, time.ticks_ms()

	p_log and p_log('Finished')


async def main():
	conf = Conf()
	leds = LEDBlinker(conf)
	await asyncio.gather(leds.run(), run_ble(conf, leds))

asyncio.run(main())
